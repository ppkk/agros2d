<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<module:module xmlns:module="XMLModule" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="XMLModule ../xsd/module_xml.xsd">
<module:field>

  <module:general_field id="richards" name="Richard's equation">
    <module:description>The Richards equation represents the movement of water in unsaturated soils.</module:description>
    <module:analyses>
      <module:analysis id="steadystate" name="Steady state" solutions="1" type="steadystate">
        <module:field_config>
          <field_item field_key="NonlinearDampingCoeff" field_value="0.8"/>
          <field_item field_key="NewtonAutomaticDampingCoeff" field_value="0.8"/>
          <field_item field_key="TimeUnit" field_value="days"/>
        </module:field_config>
      </module:analysis>
      <module:analysis id="transient" name="Transient" solutions="1" type="transient"/>
    </module:analyses>
  </module:general_field>

  <module:constants/>

  <module:spaces>
    <module:space analysistype="steadystate">
      <module:space_config i="1" orderadjust="0" type="h1"/>
    </module:space>
    <module:space analysistype="transient">
      <module:space_config i="1" orderadjust="0" type="h1"/>
    </module:space>
  </module:spaces>

  <module:volume>
    <module:quantity id="richards_ks" shortname="re_ks"/>
    <module:quantity id="richards_a" shortname="re_a"/>
    <module:quantity id="richards_m" shortname="re_m"/>
    <module:quantity id="richards_n" shortname="re_n"/>
    <module:quantity id="richards_storativity" shortname="re_st"/>
    <module:quantity id="richards_theta_s" shortname="re_theta_s"/>
    <module:quantity id="richards_theta_r" shortname="re_theta_r"/>

<!--    bounds and extrapolate information should be transfered to function_variant-->
    <module:function id="richards_func_k" shortname="re_k" type="function_1d" switch_combo="constitutive_variant" bound_low="-40" bound_hi="-1e-9" extrapolate_hi="re_ks" interpolation_count="100" postprocessor_linearity="newton" postprocessor_analysis="transient">
      <module:quantity id="richards_ks"/>
      <module:quantity id="richards_a"/>
      <module:quantity id="richards_m"/>
      <module:quantity id="richards_n"/>
      <module:function_variant switch_value="van_genuchten" expr="re_ks*std::pow((1 + std::pow((-re_a*h),re_n)),(-re_m/2))*std::pow((1 -std::pow((-re_a*h),(re_m*re_n))*std::pow((1 + std::pow((-re_a*h),re_n)),(-re_m))),2)"/>
    </module:function>
    <module:function id="richards_func_dkdh" shortname="re_dkdh" type="function_1d" switch_combo="constitutive_variant" bound_low="-40" bound_hi="-1e-9" extrapolate_hi="0" interpolation_count="100" >
      <module:quantity id="richards_ks"/>
      <module:quantity id="richards_a"/>
      <module:quantity id="richards_m"/>
      <module:quantity id="richards_n"/>
      <module:function_variant switch_value="van_genuchten" expr="re_ks*std::pow((1 + std::pow((-re_a*h),re_n)),(-re_m/2))*(1 -std::pow((-re_a*h),(re_m*re_n))*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m)))*(-2*re_m*re_n*std::pow((-re_a*h),(re_m*re_n))*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m))/h +2*re_m*re_n*std::pow((-re_a*h),re_n)*std::pow((-re_a*h),(re_m*re_n))*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m))/(h*(1 + std::pow((-re_a*h),re_n)))) -re_ks*re_m*re_n*std::pow((-re_a*h),re_n)*std::pow((1 + std::pow((-re_a*h),re_n)),(-re_m/2))*std::pow((1 -std::pow((-re_a*h),(re_m*re_n))*std::pow((1 + std::pow((-re_a*h),re_n)),(-re_m))),2)/(2*h*(1 +std::pow((-re_a*h),re_n)))"/>
    </module:function>
    <module:function id="richards_func_ddkdhh" shortname="re_ddkdhh" type="function_1d" switch_combo="constitutive_variant" bound_low="-40" bound_hi="-1e-9" extrapolate_hi="0" interpolation_count="100" >
      <module:quantity id="richards_ks"/>
      <module:quantity id="richards_a"/>
      <module:quantity id="richards_m"/>
      <module:quantity id="richards_n"/>
      <module:function_variant switch_value="van_genuchten" expr="re_ks*std::pow((1 + std::pow((-re_a*h),re_n)),(-re_m/2))*(1 -std::pow((-re_a*h),(re_m*re_n))*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m)))*(-2*std::pow(re_m,2)*std::pow(re_n,2)*std::pow((-re_a*h),(re_m*re_n))*std::pow((1+ std::pow((-re_a*h),re_n)),(-re_m))/std::pow(h,2) +2*re_m*re_n*std::pow((-re_a*h),(re_m*re_n))*std::pow((1 + std::pow((-re_a*h),re_n)),(-re_m))/std::pow(h,2)- 2*re_m*re_n*std::pow((-re_a*h),re_n)*std::pow((-re_a*h),(re_m*re_n))*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m))/(std::pow(h,2)*(1 + std::pow((-re_a*h),re_n))) -2*re_m*std::pow(re_n,2)*std::pow((-re_a*h),(2*re_n))*std::pow((-re_a*h),(re_m*re_n))*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m))/(std::pow(h,2)*std::pow((1 + std::pow((-re_a*h),re_n)),2)) -2*std::pow(re_m,2)*std::pow(re_n,2)*std::pow((-re_a*h),(2*re_n))*std::pow((-re_a*h),(re_m*re_n))*std::pow((1+ std::pow((-re_a*h),re_n)),(-re_m))/(std::pow(h,2)*std::pow((1 + std::pow((-re_a*h),re_n)),2)) +2*re_m*std::pow(re_n,2)*std::pow((-re_a*h),re_n)*std::pow((-re_a*h),(re_m*re_n))*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m))/(std::pow(h,2)*(1 + std::pow((-re_a*h),re_n))) +4*std::pow(re_m,2)*std::pow(re_n,2)*std::pow((-re_a*h),re_n)*std::pow((-re_a*h),(re_m*re_n))*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m))/(std::pow(h,2)*(1 + std::pow((-re_a*h),re_n)))) +re_ks*std::pow((1 + std::pow((-re_a*h),re_n)),(-re_m/2))*(-re_m*re_n*std::pow((-re_a*h),(re_m*re_n))*std::pow((1+ std::pow((-re_a*h),re_n)),(-re_m))/h +re_m*re_n*std::pow((-re_a*h),re_n)*std::pow((-re_a*h),(re_m*re_n))*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m))/(h*(1 +std::pow((-re_a*h),re_n))))*(-2*re_m*re_n*std::pow((-re_a*h),(re_m*re_n))*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m))/h +2*re_m*re_n*std::pow((-re_a*h),re_n)*std::pow((-re_a*h),(re_m*re_n))*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m))/(h*(1 + std::pow((-re_a*h),re_n)))) -re_ks*re_m*re_n*std::pow((-re_a*h),re_n)*std::pow((1 + std::pow((-re_a*h),re_n)),(-re_m/2))*(1 -std::pow((-re_a*h),(re_m*re_n))*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m)))*(-2*re_m*re_n*std::pow((-re_a*h),(re_m*re_n))*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m))/h +2*re_m*re_n*std::pow((-re_a*h),re_n)*std::pow((-re_a*h),(re_m*re_n))*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m))/(h*(1 + std::pow((-re_a*h),re_n))))/(h*(1 +std::pow((-re_a*h),re_n))) + re_ks*re_m*re_n*std::pow((-re_a*h),re_n)*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m/2))*std::pow((1 - std::pow((-re_a*h),(re_m*re_n))*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m))),2)/(2*std::pow(h,2)*(1 + std::pow((-re_a*h),re_n))) +re_ks*re_m*std::pow(re_n,2)*std::pow((-re_a*h),(2*re_n))*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m/2))*std::pow((1 - std::pow((-re_a*h),(re_m*re_n))*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m))),2)/(2*std::pow(h,2)*std::pow((1 +std::pow((-re_a*h),re_n)),2)) - re_ks*re_m*std::pow(re_n,2)*std::pow((-re_a*h),re_n)*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m/2))*std::pow((1 - std::pow((-re_a*h),(re_m*re_n))*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m))),2)/(2*std::pow(h,2)*(1 + std::pow((-re_a*h),re_n))) +re_ks*std::pow(re_m,2)*std::pow(re_n,2)*std::pow((-re_a*h),(2*re_n))*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m/2))*std::pow((1 - std::pow((-re_a*h),(re_m*re_n))*std::pow((1 +std::pow((-re_a*h),re_n)),(-re_m))),2)/(4*std::pow(h,2)*std::pow((1 +std::pow((-re_a*h),re_n)),2))"/>
    </module:function>
    <module:function id="richards_func_c" shortname="re_c" type="function_1d" switch_combo="constitutive_variant" bound_low="-40" bound_hi="-1e-9" extrapolate_hi="re_st" interpolation_count="100" postprocessor_linearity="newton" postprocessor_analysis="transient">
      <module:quantity id="richards_ks"/>
      <module:quantity id="richards_a"/>
      <module:quantity id="richards_m"/>
      <module:quantity id="richards_n"/>
      <module:quantity id="richards_storativity"/>
      <module:quantity id="richards_theta_s"/>
      <module:quantity id="richards_theta_r"/>
      <module:function_variant switch_value="van_genuchten" expr="re_a*std::pow(-(re_a*h), -1 + re_n)*std::pow(1 + std::pow(-(re_a*h), re_n), -1 - re_m)*re_m*re_n*(re_theta_s - re_theta_r) + (re_st*((re_theta_s - re_theta_r)/std::pow(1 + std::pow(-(re_a*h), re_n), re_m) + re_theta_r))/re_theta_s"/>
    </module:function>

    <module:matrix_form id="conductivity" i="1" j="1" planar="re_k * (udx * vdx + udy * vdy)"
                                                      axi="re_k * r * (udr * vdr + udz * vdz)" symmetric="1" />
    <module:matrix_form id="conductivity_derivative" i="1" j="1" planar="- re_dkdh * udy * vval"
                                                                 axi="- re_dkdh * udz * vval"/>
    <module:matrix_form id="conductivity_jacobian" i="1" j="1" planar="re_dkdh * uval * (updx * vdx + updy * vdy)"
                                                               axi="re_dkdh * r * uval * (updr * vdr + updz * vdz)"/>
    <module:matrix_form id="conductivity_derivative_jacobian" i="1" j="1" planar="- re_ddkdhh * uval * updy * vval"
                                                                          axi="- re_ddkdhh * r * uval * updz * vval"/>
    <module:matrix_form id="time_mat" i="1" j="1" planar="re_c * uval * vval * timedermat"
                                                  axi="re_c * r * uval * vval * timedermat" />
    <module:vector_form id="time_vec" i="1" j="1" planar="re_c * timedervec * vval"
                                                  axi="re_c * r * timedervec * vval"/>
    
    <module:weakforms_volume>
      <module:weakform_volume analysistype="steadystate" equation="-\, \div \left( K\,\, \grad h \right) - \frac{\partial K}{\partial h} \frac{\partial h}{\partial z} = 0">
        <module:quantity id="richards_ks"/>
        <module:quantity id="richards_a"/>
        <module:quantity id="richards_m"/>
        <module:quantity id="richards_n"/>
        <module:quantity id="richards_storativity"/>
        <module:quantity id="richards_theta_s"/>
        <module:quantity id="richards_theta_r"/>

        <module:function_use id="richards_func_k" nonlinearity_planar="value1" nonlinearity_axi="value1" />
        <module:function_use id="richards_func_dkdh" nonlinearity_planar="value1" nonlinearity_axi="value1" />
        <module:function_use id="richards_func_ddkdhh" nonlinearity_planar="value1" nonlinearity_axi="value1" />
        <module:function_use id="richards_func_c" nonlinearity_planar="value1" nonlinearity_axi="value1" />

        <!--
        <module:linearity_option type="linear">
          <module:matrix_form id="conductivity" />
          <module:matrix_form id="conductivity_derivative" />
        </module:linearity_option>
        -->

        <module:linearity_option type="newton">
          <module:matrix_form id="conductivity" />
          <module:matrix_form id="conductivity_derivative" />
          <module:matrix_form id="conductivity_jacobian" />
          <module:matrix_form id="conductivity_derivative_jacobian" />
          <module:vector_form id="conductivity" variant="residual" />
          <module:vector_form id="conductivity_derivative" variant="residual" />
        </module:linearity_option>

      </module:weakform_volume>
      <module:weakform_volume analysistype="transient" equation="-\, \div \left( K\,\, \grad h \right) - \frac{\partial K}{\partial h} \frac{\partial h}{\partial z} + C \frac{\partial h}{\partial t} = 0">
        <module:quantity id="richards_ks"/>
        <module:quantity id="richards_a"/>
        <module:quantity id="richards_m"/>
        <module:quantity id="richards_n"/>
        <module:quantity id="richards_storativity"/>
        <module:quantity id="richards_theta_s"/>
        <module:quantity id="richards_theta_r"/>

        <module:function_use id="richards_func_k" nonlinearity_planar="value1" nonlinearity_axi="value1" />
        <module:function_use id="richards_func_dkdh" nonlinearity_planar="value1" nonlinearity_axi="value1" />
        <module:function_use id="richards_func_ddkdhh" nonlinearity_planar="value1" nonlinearity_axi="value1" />
        <module:function_use id="richards_func_c" nonlinearity_planar="value1" nonlinearity_axi="value1" />

        <!--
        <module:linearity_option type="linear">
          <module:matrix_form id="conductivity" />
          <module:matrix_form id="conductivity_derivative" />
          <module:matrix_form id="time_mat" />
          <module:vector_form id="time_vec" />
        </module:linearity_option>
        -->

        <module:linearity_option type="newton">
          <module:matrix_form id="conductivity" />
          <module:matrix_form id="conductivity_derivative" />
          <module:matrix_form id="conductivity_jacobian" />
          <module:matrix_form id="conductivity_derivative_jacobian" />
          <module:matrix_form id="time_mat" />
          <module:vector_form id="conductivity" variant="residual" />
          <module:vector_form id="conductivity_derivative" variant="residual" />
	  <module:vector_form id="time_mat" variant="residual"/>
	  <module:vector_form id="time_vec" coefficient="-1"/>
        </module:linearity_option>

        <module:linearity_option type="picard">
          <module:matrix_form id="conductivity" />
          <module:matrix_form id="conductivity_derivative" />
          <module:matrix_form id="time_mat" />
          <module:vector_form id="time_vec" />
        </module:linearity_option>

      </module:weakform_volume>
    </module:weakforms_volume>
  </module:volume>

  <module:surface>
    <module:quantity id="richards_pressure_head" shortname="re_h"/>
    <module:quantity id="richards_darcy_velocity" shortname="re_q"/>

    <module:essential_form id="essential" i="1" axi="re_h" planar="re_h"/>
    <module:vector_form id="darcy_velocity" i="1" j="1" axi="r * re_q * vval" planar="re_q * vval"/>

    <module:weakforms_surface>
      <module:weakform_surface analysistype="steadystate" default="richards_pressure_head">
        <module:boundary equation="h = h_0" id="richards_pressure_head" name="Pressure head">
          <module:quantity dependence="space" id="richards_pressure_head"/>

          <module:linearity_option type="newton">
            <module:essential_form id="essential" i="1" axi="re_h" planar="re_h"/>
          </module:linearity_option>

          <module:linearity_option type="picard">
            <module:essential_form id="essential" i="1" axi="re_h" planar="re_h"/>
          </module:linearity_option>
        </module:boundary>

        <module:boundary equation="q = - K \frac{\partial h}{\partial n_0} = q_0 " id="richards_darcy_velocity" name="Darcy velocity">
          <module:quantity id="richards_darcy_velocity"/>

          <module:linearity_option type="newton">
            <module:vector_form id="darcy_velocity" coefficient="-1"/>
          </module:linearity_option>

          <module:linearity_option type="picard">
            <module:vector_form id="darcy_velocity"/>
          </module:linearity_option>
        </module:boundary>
      </module:weakform_surface>

      <module:weakform_surface analysistype="transient" default="richards_pressure_head">
        <module:boundary equation="h = h_0" id="richards_pressure_head" name="Pressure head">
          <module:quantity dependence="time-space" id="richards_pressure_head"/>

          <module:linearity_option type="newton">
            <module:essential_form id="essential" i="1" axi="re_h" planar="re_h"/>
          </module:linearity_option>

          <module:linearity_option type="picard">
            <module:essential_form id="essential" i="1" axi="re_h" planar="re_h"/>
          </module:linearity_option>
        </module:boundary>

        <module:boundary equation="q = - K \frac{\partial h}{\partial n_0} = q_0 " id="richards_darcy_velocity" name="Darcy velocity">
          <module:quantity id="richards_darcy_velocity"/>

          <module:linearity_option type="newton">
            <module:vector_form id="darcy_velocity" coefficient="-1"/>
          </module:linearity_option>

          <module:linearity_option type="picard">
            <module:vector_form id="darcy_velocity"/>
          </module:linearity_option>
        </module:boundary>
      </module:weakform_surface>
    </module:weakforms_surface>
  </module:surface>

  <module:error_calculator>
        <module:calculator id="l2" name="L2 norm">
            <module:expression analysistype="steadystate" axi="(uval * vval)"
                                                          planar="(uval * vval)"/>
            <module:expression analysistype="transient" axi="(uval * vval)"
                                                          planar="(uval * vval)"/>
        </module:calculator>
        <module:calculator id="h1" name="H1 norm">
            <module:expression analysistype="steadystate" axi="(uval * vval + udr * vdr + udz * vdz)"
                                                          planar="(uval * vval + udx * vdx + udy * vdy)"/>
            <module:expression analysistype="transient" axi="(uval * vval + udr * vdr + udz * vdz)"
                                                        planar="(uval * vval + udx * vdx + udy * vdy)"/>
        </module:calculator>
  </module:error_calculator>

  <module:preprocessor>
    <module:gui type="volume">
      <module:group>        
        <module:quantity condition="value >= 0" default="0" id="richards_ks" name="Saturated hydraulic conductivity" shortname="ks" shortname_html="&lt;i>k&lt;/i>&lt;sub>s&lt;/sub>" shortname_latex="K_\mathrm{s}" unit="L/t" unit_html="Lt&lt;sup>-1&lt;/sup>" unit_latex="L\cdott^{-1}"/>
        <module:quantity condition="value >= 0" default="0" id="richards_a" name="Van Genuchten's parameter" shortname="a" shortname_html="&lt;i>&amp;alpha;&lt;/i>" shortname_latex="\alpha" unit="1/L" unit_html="L&lt;sup>-1&lt;/sup>" unit_latex="L^{-1}"/>
        <module:quantity condition="value >= 0" default="0" id="richards_m" name="Van Genuchten's parameter" shortname="m" shortname_html="&lt;i>m&lt;/i>" shortname_latex="m" unit="-" unit_html="-" unit_latex="-"/>
        <module:quantity condition="value >= 0" default="0" id="richards_n" name="Van Genuchten's parameter" shortname="n" shortname_html="&lt;i>n&lt;/i>" shortname_latex="n" unit="-" unit_html="-" unit_latex="-"/>
        <module:quantity condition="value >= 0" default="0" id="richards_storativity" name="Storativity" shortname="st" shortname_html="&lt;i>st&lt;/i>" shortname_latex="st" unit_html="L&lt;sup>-1&lt;/sup>" unit_latex="L^{-1}"/>
        <module:quantity condition="value >= 0" default="0" id="richards_theta_s" name="Saturated water content" shortname="ts" shortname_html="&lt;i>&amp;theta;&lt;/i>&lt;/i>&lt;sub>s&lt;/sub>" shortname_latex="\theta_\mathrm{s}" unit="-" unit_html="-" unit_latex="-"/>
        <module:quantity condition="value >= 0" default="0" id="richards_theta_r" name="Residual water content" shortname="tr" shortname_html="&lt;i>&amp;theta;&lt;/i>&lt;/i>&lt;sub>r&lt;/sub>" shortname_latex="\theta_\mathrm{r}" unit="-" unit_html="-" unit_latex="-"/>

        <module:switch_combo id="constitutive_variant" name="Constitutive relations" implicit_option="van_genuchten">
          <module:switch_option id="van_genuchten" name="van Genuchten" />
        </module:switch_combo>
      </module:group>
    </module:gui>
    <module:gui type="surface">
      <module:group>
        <module:quantity condition="" default="0" id="richards_pressure_head" name="Pressure head" shortname="h" shortname_html="&lt;i>h&lt;/i>" shortname_latex="h" unit="L" unit_html="L" unit_latex="L"/>
        <module:quantity condition="" default="0" id="richards_darcy_velocity" name="Darcy velocity" shortname="q" shortname_html="&lt;i>q&lt;/i>" shortname_latex="q" unit="L/T" unit_html="L.T&lt;sup>-1&lt;/sup>" unit_latex="T \cdot T^{-1}"/>
      </module:group>
    </module:gui>
  </module:preprocessor>

  <module:postprocessor>
    <module:localvariables>
      <module:localvariable id="richards_pressure_head" name="Pressure head" shortname="h" shortname_html="&lt;i>ph&lt;/i>" shortname_latex="h" type="scalar" unit="L" unit_html="L" unit_latex="L">
        <module:expression analysistype="steadystate" axi="value1" planar="value1"/>
        <module:expression analysistype="transient" axi="value1" planar="value1"/>
      </module:localvariable>
      <module:localvariable format="%5.3e" id="richards_pressure_darcy_velocity" name="Darcy velocity" shortname="q" shortname_html="&lt;i>q&lt;/i>" shortname_latex="q" type="vector" unit="L/T" unit_html="L.T&lt;sup>-1&lt;/sup>" unit_latex="T \cdot T^{-1}">
        <module:expression analysistype="steadystate" axi_r="- tern(value1 > 0, re_ks, re_ks*pow((1 + pow((-re_a*value1), re_n)),(-re_m/2))*pow((1 - pow((-re_a*value1), (re_m*re_n))*pow((1 + pow((-re_a*value1), re_n)), (-re_m))), 2)) * dr1" axi_z="- tern(value1 > 0, re_ks, re_ks*pow((1 + pow((-re_a*value1), re_n)),(-re_m/2))*pow((1 - pow((-re_a*value1), (re_m*re_n))*pow((1 + pow((-re_a*value1), re_n)), (-re_m))), 2)) * dz1" planar_x="- tern(value1 > 0, re_ks, re_ks*pow((1 + pow((-re_a*value1), re_n)),(-re_m/2))*pow((1 - pow((-re_a*value1), (re_m*re_n))*pow((1 + pow((-re_a*value1), re_n)), (-re_m))), 2)) * dx1" planar_y="- tern(value1 > 0, re_ks, re_ks*pow((1 + pow((-re_a*value1), re_n)),(-re_m/2))*pow((1 - pow((-re_a*value1), (re_m*re_n))*pow((1 + pow((-re_a*value1), re_n)), (-re_m))), 2)) * dy1"/>
        <module:expression analysistype="transient" axi_r="- tern(value1 > 0, re_ks, re_ks*pow((1 + pow((-re_a*value1), re_n)),(-re_m/2))*pow((1 - pow((-re_a*value1), (re_m*re_n))*pow((1 + pow((-re_a*value1), re_n)), (-re_m))), 2)) * dr1" axi_z="- tern(value1 > 0, re_ks, re_ks*pow((1 + pow((-re_a*value1), re_n)),(-re_m/2))*pow((1 - pow((-re_a*value1), (re_m*re_n))*pow((1 + pow((-re_a*value1), re_n)), (-re_m))), 2)) * dz1" planar_x="- tern(value1 > 0, re_ks, re_ks*pow((1 + pow((-re_a*value1), re_n)),(-re_m/2))*pow((1 - pow((-re_a*value1), (re_m*re_n))*pow((1 + pow((-re_a*value1), re_n)), (-re_m))), 2)) * dx1" planar_y="- tern(value1 > 0, re_ks, re_ks*pow((1 + pow((-re_a*value1), re_n)),(-re_m/2))*pow((1 - pow((-re_a*value1), (re_m*re_n))*pow((1 + pow((-re_a*value1), re_n)), (-re_m))), 2)) * dy1"/>
      </module:localvariable>
      <module:localvariable format="%5.3e" id="richards_pressure_hydraulic_conductivity" name="Hydraulic conductivity" shortname="K" shortname_html="&lt;i>K&lt;/i>" shortname_latex="K" type="scalar" unit="1/T" unit_html="T&lt;sup>-1&lt;/sup>" unit_latex="T^{-1}">
        <module:expression analysistype="steadystate" axi="re_k" planar="re_k"/>
        <module:expression analysistype="transient" axi="re_k" planar="re_k" />
      </module:localvariable>
      <module:localvariable format="%5.3e" id="richards_specific_moisture_capacity" name="Specific moisture capacity" shortname="C" shortname_html="&lt;i>C&lt;/i>" shortname_latex="C" type="scalar" unit="1/L" unit_html="L&lt;sup>-1&lt;/sup>" unit_latex="L^{-1}">
        <module:expression analysistype="steadystate" axi="re_c" planar="re_c"/>
        <module:expression analysistype="transient" axi="re_c" planar="re_c" />
      </module:localvariable>
      <!--
      <module:localvariable id="richards_pressure_gradient" name="Pressure gradient" shortname="G" shortname_html="&lt;i>G&lt;/i>" shortname_latex="G" type="vector" unit="-" unit_html="-" unit_latex="-">
        <module:expression analysistype="steadystate" axi_r="dr1" axi_z="dz1" planar_x="dx1" planar_y="dy1"/>
        <module:expression analysistype="transient" axi_r="dr1" axi_z="dz1" planar_x="dx1" planar_y="dy1"/>
      </module:localvariable>
      -->
    </module:localvariables>
    <module:view>
      <module:scalar_view>
        <module:default analysistype="steadystate" id="richards_pressure_head"/>
        <module:default analysistype="transient" id="richards_pressure_head"/>
      </module:scalar_view>
      <module:vector_view>
        <module:default analysistype="steadystate" id="richards_pressure_darcy_velocity"/>
        <module:default analysistype="transient" id="richards_pressure_darcy_velocity"/>
      </module:vector_view>
    </module:view>
    <module:volumeintegrals>
      <module:volumeintegral id="richards_volume" name="Volume" shortname="V" shortname_html="&lt;i>V&lt;/i>" shortname_latex="V" unit="m3" unit_html="m&lt;sup>3&lt;/sup>" unit_latex="m^{3}">
        <module:expression analysistype="steadystate" axi="2.0 * PI * r" planar="1.0"/>
        <module:expression analysistype="transient" axi="2.0 * PI * r" planar="1.0"/>
      </module:volumeintegral>
      <module:volumeintegral id="richards_cross_section" name="Cross section" shortname="S" shortname_html="&lt;i>S&lt;/i>" shortname_latex="S" unit="m2" unit_html="m&lt;sup>2&lt;/sup>" unit_latex="m^{2}">
        <module:expression analysistype="steadystate" axi="1.0" planar="1.0"/>
        <module:expression analysistype="transient" axi="1.0" planar="1.0"/>
      </module:volumeintegral>
    </module:volumeintegrals>
    <module:surfaceintegrals>
      <module:surfaceintegral id="richards_length" name="Length" shortname="l" shortname_html="&lt;i>l&lt;/i>" shortname_latex="l" unit="m" unit_html="m" unit_latex="m">
        <module:expression analysistype="steadystate" axi="1.0" planar="1.0"/>
        <module:expression analysistype="transient" axi="1.0" planar="1.0"/>
      </module:surfaceintegral>
      <module:surfaceintegral id="richards_surface" name="Surface" shortname="S" shortname_html="&lt;i>S&lt;/i>" shortname_latex="S" unit="m2" unit_html="m&lt;sup>2&lt;/sup>" unit_latex="m^{2}">
        <module:expression analysistype="steadystate" axi="2.0 * PI * r" planar="1.0"/>
        <module:expression analysistype="transient" axi="2.0 * PI * r" planar="1.0"/>
      </module:surfaceintegral>
    </module:surfaceintegrals>
    <module:force/>
  </module:postprocessor>

  <module:cpp>
  </module:cpp>

</module:field>
</module:module>
